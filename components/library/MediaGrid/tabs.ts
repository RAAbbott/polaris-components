// Auto-generated by scripts/generate-tabs.js
// DO NOT EDIT THIS FILE MANUALLY - Edit tabs.config.json instead and run: yarn generate-tabs

import { Tab } from '@/types';

export const tabs: Tab[] = [
  {
    "title": "Example Usage",
    "content": "import { Layout, Page, Card, BlockStack, Text } from '@shopify/polaris';\nimport { MediaGrid } from './MediaGrid';\n\nexport const Example = () => {\n  return (\n    <Page>\n      <Layout>\n        <Layout.Section>\n          <Card>\n            <BlockStack gap='400'>\n              <Text variant='headingMd' as='h3'>\n                Media\n              </Text>\n              <MediaGrid />\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n};\n",
    "lang": "jsx"
  },
  {
    "title": "MediaGrid.jsx",
    "content": "import { useState, useCallback } from 'react';\nimport { DropZone, Image, Icon, Button } from '@shopify/polaris';\nimport { DeleteIcon, PlusIcon } from '@shopify/polaris-icons';\nimport styles from './MediaGrid.module.css';\n\nexport const MediaGrid = () => {\n  const [images, setImages] = useState([]);\n\n  const handleDrop = useCallback((_droppedFiles, acceptedFiles) => {\n    setImages((prev) => [...prev, ...acceptedFiles?.map((file) => ({ file, id: generateId() }))]);\n  }, []);\n\n  if (images?.length) {\n    return (\n      <div className={styles.grid}>\n        {images.map((image, i) => {\n          return (\n            <div\n              key={image.id}\n              className={styles.mediaItem}\n              style={i === 0 ? { gridColumn: '1 / span 2', gridRow: '1 / span 2' } : undefined}\n            >\n              <div className={styles.mediaOverlay}>\n                <div className={styles.deleteButton}>\n                  <Button\n                    size='micro'\n                    icon={DeleteIcon}\n                    tone='critical'\n                    onClick={() => setImages((prev) => prev.toSpliced(i, 1))}\n                  ></Button>\n                </div>\n              </div>\n\n              <Image\n                source={URL.createObjectURL(image.file)}\n                width='100%'\n                height='100%'\n                alt='Media image'\n                className={styles.image}\n              />\n            </div>\n          );\n        })}\n\n        <DropZone outline={false} onDrop={handleDrop} accept='image/*' type='image'>\n          <div className={styles.dropZoneBox}>\n            <Icon source={PlusIcon}></Icon>\n          </div>\n        </DropZone>\n      </div>\n    );\n  }\n\n  return (\n    <DropZone accept='image/*' type='image' onDrop={handleDrop}>\n      <DropZone.FileUpload />\n    </DropZone>\n  );\n};\n\n/* \n  Very basic ID generator, used to prevent duplicate id errors \n  if uploading the same image multiple times. Can swap out for\n  something more robust or use an npm package like `uuid` \n*/\nconst generateId = () => {\n  return Math.random().toString(20).slice(3);\n};\n",
    "lang": "jsx"
  },
  {
    "title": "MediaGrid.module.css",
    "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-template-rows: repeat(auto, 1fr);\n  gap: var(--p-space-150);\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.dropZoneBox {\n  background: var(--p-color-bg-surface-secondary);\n  border-color: var(--p-color-border-tertiary);\n  border-style: dashed;\n  border-radius: var(--p-border-radius-200);\n  border-width: var(--p-border-width-0165);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  cursor: pointer;\n  aspect-ratio: 1;\n}\n\n.dropZoneBox:hover {\n  background: var(--p-color-bg-surface-secondary-hover);\n}\n\n.mediaItem {\n  border: 1px solid rgba(204, 204, 204, 1);\n  position: relative;\n  display: flex;\n  border-radius: var(--p-border-radius-200);\n  justify-content: center;\n  align-items: center;\n  aspect-ratio: 1;\n}\n\n.mediaOverlay {\n  background-color: #00000080;\n  opacity: 0;\n  height: 100%;\n  border-radius: var(--p-border-radius-200);\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: opacity var(--p-motion-duration-150);\n}\n\n.mediaOverlay:hover {\n  opacity: 1;\n}\n\n.deleteButton {\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  cursor: pointer;\n}\n\n.image {\n  object-fit: cover;\n  border-radius: var(--p-border-radius-200);\n  aspect-ratio: 1;\n}\n",
    "lang": "css"
  }
];
