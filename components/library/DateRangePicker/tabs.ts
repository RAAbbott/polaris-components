// Auto-generated by scripts/generate-tabs.js
// DO NOT EDIT THIS FILE MANUALLY - Edit tabs.config.json instead and run: yarn generate-tabs

import { Tab } from '@/types';

export const tabs: Tab[] = [
  {
    "title": "Example Usage",
    "content": "import { useState } from 'react';\nimport { Layout, Page } from '@shopify/polaris';\nimport { DateRangePicker } from './DateRangePicker';\n\nexport const Example = () => {\n  const [date, setDate] = useState({}); // {start, end}\n\n  return (\n    <Page narrowWidth>\n      <Layout>\n        <Layout.Section>\n          <DateRangePicker\n            value={date}\n            onDateRangeSelect={({ start, end }) => {\n              console.log('Selected Start Date:', start);\n              console.log('Selected End Date:', end);\n              // You can now do whatever you need with these dates, like setting state or making API calls\n              setDate({ start, end });\n            }}\n          />\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n};\n",
    "lang": "jsx"
  },
  {
    "title": "DateRangePicker.jsx",
    "content": "import React, { useState, useCallback, useEffect } from 'react';\nimport {\n  Popover,\n  Button,\n  TextField,\n  Box,\n  DatePicker,\n  Icon,\n  OptionList,\n  Scrollable,\n  InlineGrid,\n  BlockStack,\n  InlineStack,\n  useBreakpoints\n} from '@shopify/polaris';\nimport { ArrowRightIcon, CalendarIcon } from '@shopify/polaris-icons';\n\nexport const DateRangePicker = ({ onDateRangeSelect, value: { start, end } }) => {\n  const { mdDown } = useBreakpoints();\n  const [popoverActive, setPopoverActive] = useState(false);\n  const today = new Date(new Date().setHours(0, 0, 0, 0));\n  const yesterday = new Date(\n    new Date(new Date().setDate(today.getDate() - 1)).setHours(0, 0, 0, 0)\n  );\n  const ranges = [\n    { title: 'Today', period: { since: today, until: today } },\n    { title: 'Yesterday', period: { since: yesterday, until: yesterday } },\n    {\n      title: 'Last 7 days',\n      period: {\n        since: new Date(new Date().setDate(today.getDate() - 7)),\n        until: yesterday\n      }\n    },\n    {\n      title: 'Last 30 days',\n      period: {\n        since: new Date(new Date().setDate(today.getDate() - 30)),\n        until: yesterday\n      }\n    },\n    {\n      title: 'Last 90 days',\n      period: {\n        since: new Date(new Date().setDate(today.getDate() - 90)),\n        until: yesterday\n      }\n    },\n    {\n      title: 'Last 365 Days',\n      period: {\n        since: new Date(new Date().setDate(today.getDate() - 365)),\n        until: yesterday\n      }\n    },\n    {\n      title: 'Custom',\n      period: { since: yesterday, until: yesterday }\n    }\n  ];\n\n  const getDefaultDateRange = () => {\n    const areDatesEqual = (dateX, dateY) => dateX.toDateString() == dateY.toDateString();\n\n    if (start && end) {\n      const currentRange = ranges.find((range) => {\n        const { since, until } = range.period;\n\n        return areDatesEqual(since, start) && areDatesEqual(until, end)\n      });\n\n      if (currentRange) {\n        return currentRange;\n      } else {\n        return { title: 'Custom', period: { since: start, until: end } };\n      }\n    }\n\n    return ranges[0];\n  };\n\n  const defaultRange = getDefaultDateRange();\n  const [activeDateRange, setActiveDateRange] = useState(defaultRange);\n  const [dateState, setDateState] = useState({\n    month: activeDateRange.period.since.getMonth(),\n    year: activeDateRange.period.since.getFullYear()\n  });\n\n  const handleMonthChange = useCallback((month, year) => {\n    setDateState({ month, year });\n  }, []);\n\n  const formatDate = (date) => date.toISOString().split('T')[0];\n\n  useEffect(() => {\n    setDateState({\n      month: activeDateRange.period.since.getMonth(),\n      year: activeDateRange.period.since.getFullYear()\n    });\n  }, [activeDateRange]);\n\n  return (\n    <Box>\n      <Popover\n        active={popoverActive}\n        autofocusTarget='none'\n        preferredAlignment='left'\n        preferredPosition='below'\n        fluidContent\n        sectioned={false}\n        fullHeight\n        activator={\n          <Button icon={CalendarIcon} size='slim' onClick={() => setPopoverActive(!popoverActive)}>\n            {activeDateRange.title}\n          </Button>\n        }\n        onClose={() => setPopoverActive(false)}\n      >\n        <Box\n          style={{\n            paddingTop: '16px',\n            paddingLeft: '10px',\n            paddingRight: '10px',\n            paddingBottom: '16px'\n          }}\n        >\n          <Popover.Pane fixed>\n            <InlineGrid\n              columns={{ xs: '1fr', mdDown: '1fr', md: 'max-content max-content' }}\n              gap={0}\n            >\n              <Box\n                maxWidth='212px'\n                width='100%'\n                style={{\n                  paddingRight: '20px'\n                }}\n              >\n                <Scrollable style={{ height: 'auto' }}>\n                  <OptionList\n                    options={ranges.map((range) => ({\n                      value: range.title,\n                      label: (\n                        <div\n                          style={{\n                            minWidth: '120px' // Adjust this value based on your longest label\n                          }}\n                        >\n                          {range.title}\n                        </div>\n                      )\n                    }))}\n                    selected={activeDateRange.title}\n                    onChange={(selected) => {\n                      const selectedRange = ranges.find((range) => range.title === selected[0]);\n                      setActiveDateRange(selectedRange);\n                    }}\n                  />\n                </Scrollable>\n              </Box>\n              <Box maxWidth='516px'>\n                <BlockStack gap='400'>\n                  <InlineStack gap='200'>\n                    <div style={{ flexGrow: 1 }}>\n                      <TextField\n                        label='Since'\n                        role='combobox'\n                        value={formatDate(activeDateRange.period.since)}\n                        autoComplete='off'\n                        readOnly\n                      />\n                    </div>\n                    {!mdDown ? (\n                      <Box\n                        style={{\n                          marginTop: '5%'\n                        }}\n                      >\n                        <Icon source={ArrowRightIcon} tone='subdued' />\n                      </Box>\n                    ) : null}\n\n                    <div style={{ flexGrow: 1 }}>\n                      <TextField\n                        label='Until'\n                        role='combobox'\n                        value={formatDate(activeDateRange.period.until)}\n                        autoComplete='off'\n                        readOnly\n                      />\n                    </div>\n                  </InlineStack>\n                  <div style={{ height: '256px' }}>\n                    <DatePicker\n                      month={dateState.month}\n                      year={dateState.year}\n                      selected={{\n                        start: activeDateRange.period.since,\n                        end: activeDateRange.period.until\n                      }}\n                      onChange={({ start, end }) => {\n                        setActiveDateRange({\n                          title: 'Custom',\n                          period: { since: start, until: end }\n                        });\n                      }}\n                      onMonthChange={handleMonthChange}\n                      multiMonth={mdDown ? false : true}\n                      allowRange\n                    />\n                  </div>\n                </BlockStack>\n              </Box>\n            </InlineGrid>\n          </Popover.Pane>\n          <Popover.Pane fixed>\n            <Popover.Section>\n              <InlineStack align='end' gap='200'>\n                <Button\n                  onClick={() => {\n                    setActiveDateRange(defaultRange);\n                    setPopoverActive(false);\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant='primary'\n                  onClick={() => {\n                    onDateRangeSelect({\n                      start: activeDateRange.period.since,\n                      end: activeDateRange.period.until\n                    });\n                    setPopoverActive(false);\n                  }}\n                >\n                  Apply\n                </Button>\n              </InlineStack>\n            </Popover.Section>\n          </Popover.Pane>\n        </Box>\n      </Popover>\n    </Box>\n  );\n};\n",
    "lang": "jsx"
  }
];
