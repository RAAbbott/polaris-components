// Auto-generated by scripts/generate-tabs.js
// DO NOT EDIT THIS FILE MANUALLY - Edit tabs.config.json instead and run: yarn generate-tabs

import { Tab } from '@/types';

export const tabs: Tab[] = [
  {
    "title": "Example Usage",
    "content": "import { Page, Layout } from '@shopify/polaris';\nimport { ReviewBanner } from './ReviewBanner';\n\nexport function Example() {\n  return (\n    <Page>\n      <ReviewBanner\n        title='How was your experience?'\n        description='Click below to rate us on the Shopify App Store'\n        onReview={(rating) => {\n          console.log(`Rating: ${rating}`);\n          // You can:\n          // - Hide the banner\n          // - Redirect to app store\n          // - Record analytics\n          // - Send slack notifications like `${shopName} clicked on review banner: ${rating} stars`\n        }}\n        onClose={() => {\n          // Handle the close action here\n          console.log('Review banner closed');\n        }}\n      />\n    </Page>\n  );\n}\n",
    "lang": "jsx"
  },
  {
    "title": "ReviewBanner.jsx",
    "content": "import { useState } from 'react';\nimport { Card, BlockStack, Text, InlineStack, Button } from '@shopify/polaris';\nimport { XIcon } from '@shopify/polaris-icons';\n/**\n * A banner component that allows users to submit reviews using a 5-star rating system.\n * @param {Object} props - The component props\n * @param {string} props.title - The title text to display in the banner\n * @param {string} props.description - The description text to display below the title\n * @param {Function} props.onReview - Callback function that receives the selected rating (1-5)\n * @param {Function} props.onClose - Callback function that handles the close action\n * @returns {JSX.Element} A card containing the review banner\n */\nexport function ReviewBanner({ title, description, onReview, onClose }) {\n  return (\n    <Card>\n      <BlockStack gap='400'>\n        <BlockStack gap='200'>\n          <InlineStack align='space-between' blockAlign='center'>\n            <Text as='h3' variant='headingMd'>\n              {title}\n            </Text>\n            <Button icon={XIcon} variant='tertiary' onClick={onClose} />\n          </InlineStack>\n          <Text as='p' variant='bodyMd' tone='subdued'>\n            {description}\n          </Text>\n        </BlockStack>\n        <ReviewStars onReview={onReview} />\n      </BlockStack>\n    </Card>\n  );\n}\n\n/**\n * A star rating component that allows users to select a rating between 1 and 5 stars.\n * @param {Object} props - The component props\n * @param {Function} props.onChange - Callback function that receives the selected rating (1-5)\n * @returns {JSX.Element} A row of interactive star icons\n */\nfunction ReviewStars({ onReview }) {\n  const [rating, setRating] = useState(0);\n  const [hoverRating, setHoverRating] = useState(null);\n\n  const handleStarClick = (index) => {\n    const newRating = index + 1;\n    setRating(newRating);\n    onReview(newRating);\n  };\n\n  return (\n    <div style={{ display: 'flex', gap: '5px' }}>\n      {[...Array(5)].map((_, index) => (\n        <span\n          key={index}\n          onClick={() => handleStarClick(index)}\n          onMouseEnter={() => setHoverRating(index + 1)}\n          onMouseLeave={() => setHoverRating(null)}\n          style={{ cursor: 'pointer', transition: 'color 0.1s' }}\n        >\n          <StarIcon filled={index < (hoverRating || rating)} id={`review-banner-${index}`} />\n        </span>\n      ))}\n    </div>\n  );\n}\n\n/**\n * A star icon component that can be filled or unfilled.\n * @param {Object} props - The component props\n * @param {boolean} props.filled - Whether the star should be filled (gold gradient) or unfilled (gray)\n * @param {string} props.id - Unique identifier for the gradient definition\n * @returns {JSX.Element} An SVG star icon\n */\nfunction StarIcon({ filled, id }) {\n  return (\n    <svg width='20' height='20' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>\n      <defs>\n        <linearGradient id={id} x1='0%' y1='0%' x2='100%' y2='100%'>\n          <stop\n            offset='0%'\n            style={{\n              stopColor: filled ? '#FFD700' : '#d1d1d1'\n            }}\n          />\n          <stop\n            offset='100%'\n            style={{\n              stopColor: filled ? '#FFA500' : '#a9a9a9'\n            }}\n          />\n        </linearGradient>\n      </defs>\n      <path\n        d='M12 1.5l2.9 6.2c.1.2.3.4.5.4l6.5.9c.5.1.7.7.3 1.1l-4.7 4.6c-.2.2-.3.4-.2.7l1.1 6.5c.1.5-.5.9-.9.7l-5.8-3.1c-.2-.1-.5-.1-.7 0l-5.8 3.1c-.5.2-1-.2-.9-.7l1.1-6.5c0-.2 0-.5-.2-.7l-4.7-4.6c-.4-.4-.2-1 .3-1.1l6.5-.9c.2 0 .4-.2.5-.4l2.9-6.2c.2-.5.9-.5 1.2 0z'\n        fill={`url(#${id})`}\n        stroke={filled ? '#FFA500' : '#a9a9a9'}\n        strokeWidth='1'\n      />\n      <path\n        d='M12 4.5l1.8 3.8c.2.4.6.7 1 .8l4 .6-2.9 2.8c-.3.3-.5.8-.4 1.2l.7 4-3.6-1.9c-.4-.2-.9-.2-1.3 0l-3.6 1.9.7-4c.1-.4-.1-.9-.4-1.2l-2.9-2.8 4-.6c.4-.1.8-.4 1-.8L12 4.5z'\n        fill={filled ? '#FFE45C' : '#d8d8d8'}\n        opacity='0.6'\n      />\n    </svg>\n  );\n}\n",
    "lang": "jsx"
  }
];
