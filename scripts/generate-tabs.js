#!/usr/bin/env node

/**
 * Build-time script to generate tabs content for all components.
 * This reads the actual component files and generates tabs.ts files.
 *
 * Run with: node scripts/generate-tabs.js
 */

const fs = require('fs');
const path = require('path');

const LIBRARY_DIR = path.join(__dirname, '../components/library');

// Language detection based on file extension
function detectLanguage(filename) {
  const ext = path.extname(filename).toLowerCase();
  const langMap = {
    '.jsx': 'jsx',
    '.tsx': 'tsx',
    '.js': 'javascript',
    '.ts': 'typescript',
    '.css': 'css',
    '.scss': 'scss',
    '.sass': 'sass',
    '.json': 'json',
    '.md': 'markdown',
    '.html': 'html'
  };
  return langMap[ext] || 'jsx';
}

// Read the tabs config from a component's directory
function getTabsConfig(componentDir) {
  const configPath = path.join(componentDir, 'tabs.config.json');

  if (!fs.existsSync(configPath)) {
    console.log(`⚠️  No tabs.config.json found in ${path.basename(componentDir)}, skipping...`);
    return null;
  }

  try {
    const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
    return config;
  } catch (err) {
    console.error(`❌ Error reading tabs.config.json in ${path.basename(componentDir)}:`, err.message);
    return null;
  }
}

// Generate the tabs.ts file for a component
function generateTabsFile(componentDir, config) {
  const componentName = path.basename(componentDir);
  const tabs = [];

  for (const fileConfig of config.files) {
    const filePath = path.join(componentDir, fileConfig.file);

    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const lang = fileConfig.lang || detectLanguage(fileConfig.file);

      const tab = {
        title: fileConfig.title,
        content,
        lang
      };

      // Add variant if specified
      if (fileConfig.variant) {
        tab.variant = fileConfig.variant;
      }

      tabs.push(tab);

      console.log(`  ✓ Read ${fileConfig.file}${fileConfig.variant ? ` (${fileConfig.variant})` : ''}`);
    } catch (err) {
      console.error(`  ❌ Error reading ${fileConfig.file}:`, err.message);
    }
  }

  // Generate the tabs.ts file content
  const tabsContent = `// Auto-generated by scripts/generate-tabs.js
// DO NOT EDIT THIS FILE MANUALLY - Edit tabs.config.json instead and run: yarn generate-tabs

import { Tab } from '@/types';

export const tabs: Tab[] = ${JSON.stringify(tabs, null, 2)};
`;

  const tabsPath = path.join(componentDir, 'tabs.ts');
  fs.writeFileSync(tabsPath, tabsContent, 'utf-8');
  console.log(`  ✓ Generated tabs.ts`);
}

// Main function
function main() {
  console.log('🔧 Generating tabs for all components...\n');

  const components = fs.readdirSync(LIBRARY_DIR).filter(name => {
    const componentPath = path.join(LIBRARY_DIR, name);
    return fs.statSync(componentPath).isDirectory();
  });

  let generated = 0;
  let skipped = 0;

  for (const component of components) {
    const componentDir = path.join(LIBRARY_DIR, component);
    console.log(`📦 ${component}`);

    const config = getTabsConfig(componentDir);

    if (config) {
      generateTabsFile(componentDir, config);
      generated++;
    } else {
      skipped++;
    }

    console.log('');
  }

  console.log('✨ Done!');
  console.log(`   Generated: ${generated}`);
  console.log(`   Skipped: ${skipped}`);
}

main();
